name: Update Movies Data

on:
  schedule:
    - cron: '0 16 * * *'  # 北京时间 00:00 (UTC+8)
  workflow_dispatch:  # 允许手动触发

jobs:
  update-data:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Shanghai  # 设置时区为北京时间
      TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
    permissions:
      contents: write  # 允许推送代码
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史记录
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install axios cheerio
          
      - name: Setup data directory
        run: |
          mkdir -p data
          chmod 755 data
          
      - name: Backup current data
        run: |
          if [ -f data/movies-data.json ]; then
            cp data/movies-data.json data/movies-data.backup.json
            chmod 644 data/movies-data.backup.json
          fi
          
      - name: Update Movies data
        id: update
        run: |
          node scripts/update-movies-data.js
          chmod 644 data/movies-data.json
        continue-on-error: true
        
      - name: Debug data directory and git status
        run: |
          ls -l data
          git status
          
      - name: Check for changes
        id: git-check
        run: |
          git diff --quiet data/movies-data.json || echo "changes=true" >> $GITHUB_OUTPUT
          
      - name: Commit and push if changed (including new files)
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add data/movies-data.json
          if ! git diff --cached --quiet; then
            git commit -m "Update Movies data"
            git push
          else
            echo "No changes to commit."
          fi
          
      - name: Restore backup on failure
        if: failure() && steps.update.outcome == 'failure'
        run: |
          if [ -f data/movies-data.backup.json ]; then
            cp data/movies-data.backup.json data/movies-data.json
            chmod 644 data/movies-data.json
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add data/movies-data.json
            git commit -m "Restore Movies data after failed update [skip ci]"
            git push
          fi
          
      - name: Send notification on failure
        if: failure()
        run: |
          echo "::warning::Failed to update movies data. Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      - name: Send notification on success
        if: success() && steps.git-check.outputs.changes == 'true'
        run: |
          echo "::notice::Movies data has been updated successfully. Changes have been committed and pushed." 